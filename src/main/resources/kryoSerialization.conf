akka {
  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]

  actor {
    provider = remote

    allow-java-serialization = off

    serializers {
        java = "akka.serialization.JavaSerializer"
        kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
        "java.io.Serializable" = kryo # switching default serializer to kryo
    }

    #extensions above with look for this kryo namespace to setup settings for kryo serializer
    kryo {
        type = "graph" #can serialize objects with shared or cyclic dependencies; alternative is "nograph" which is faster
        idstrategy = "incremental" #one of the faster, it allows dynamic object registration; alternative "explicit" [we have to add mappings{} for every single class we have to serialize]

        post-serialization-transformations = "lz4,aes" # compression (lz4) and encryption (AES)
        kryo-trace = true #for debugging, we can see every single op in console which kryo does for serializing stuff.
        use-manifests = true # automatically attach the class name to the serializaton.

        implicit-registration-logging = true # see how the standard classes/types are being registered.
        mappings { # optional for idstrategy "incremental", mandatory for "explicit"
            "learning.Book" = 45
        }
        classes = [
            "learning.Book"
        ]
    }
  }
    remote {
      artery {
          enabled = on
          transport = aeron-udp
          canonical.hostname = "localhost"
          canonical.port = 0
      }
    }
}